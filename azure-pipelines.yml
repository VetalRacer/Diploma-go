variables:
- group: Infrastructure
- name: buildConfiguration 
  value: Release
- name: registryUsername
  value: diplomaContainerRegistry
- name: imageName
  value: diplomacontainerregistry.azurecr.io/nhl
- name: azureContainerRegistry
  value: diplomacontainerregistry.azurecr.io

stages:
- stage: 'infrastucture'
  displayName: 'Provision Infrastucture'
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/terraform'))
  jobs:
  - job: Prepare_Infrastructure
    displayName: 'Prepare Azure Infrastructure'
    pool:
      vmImage: 'ubuntu-18.04'
    variables:
    - group: Infrastructure
    steps:
    - task: Bash@3
      displayName: "set commitMessage variable"
      inputs:
        targetType: inline
        script: echo '##vso[task.setvariable variable=commitMessage]$(Build.SourceVersionMessage)'
    - script: |
        # Cd to terraform folder.
        cd terraform/storage

        # Exit when any command returns a failure status.
        set -e
        # Write terraform.tfvars.
        echo 'resource_group_location = "'$(ResourceGroupLocation)'"' | tee terraform.tfvars
        # Initialize Terraform.
        terraform init -input=false
        # Apply the Terraform plan.
        terraform apply -input=false -auto-approve

      condition: and(succeeded(), eq(variables.commitMessage, 'firstdeploy'))

  - job: Deploy_Infrastucture
    dependsOn: Prepare_Infrastructure
    displayName: 'Deploy Azure Infrastructure'
    pool:
      vmImage: 'ubuntu-18.04'
    steps:
    - script: |
        # Cd to terraform folder.
        cd terraform
   
        # Exit when any command returns a failure status.
        set -e
        # Write terraform.tfvars.
        echo 'resource_group_location = "'$(ResourceGroupLocation)'"' | tee terraform.tfvars
        # Write backend.tfvars.
        echo 'resource_group_name = "tf-storage-rg"' | tee backend.tfvars
        echo 'storage_account_name = "'$(StorageAccountName)'"' | tee -a backend.tfvars
        echo 'container_name = "tfstate"' | tee -a backend.tfvars
        echo 'key = "terraform.tfstate"' | tee -a backend.tfvars
        # Initialize Terraform.
        terraform init -input=false -backend-config="backend.tfvars"
        # Apply the Terraform plan.
        terraform apply -input=false -auto-approve

        # Destroy the Terraform plan.
        # terraform destroy -input=false -auto-approve

      name: 'RunTerraform'
      displayName: 'Run Terraform'
      env:
        TF_VAR_arm_client_id: $(ARM_CLIENT_ID)
        TF_VAR_arm_client_secret: $(ARM_CLIENT_SECRET)
        TF_VAR_arm_tenant_id: $(ARM_TENANT_ID)
        TF_VAR_arm_subscription_id: $(ARM_SUBSCRIPTION_ID)
      
- stage: 'Build'
  displayName: 'Build application'
  condition: and(succeeded(), or(eq(variables['Build.SourceBranch'], 'refs/heads/terraform'), eq(variables['Build.SourceBranch'], 'refs/heads/develop')))
  jobs: 
  - job: Build_Image
    displayName: 'Build job image'
    pool:
      vmImage: 'ubuntu-18.04'
    steps:
    - task: Docker@2
      displayName: Login to ACR
      inputs:
        command: login
        containerRegistry: AzureRegistry

    - task: Docker@2
      displayName: Build and Push
      inputs:
        command: buildAndPush
        repository: $(imageName)
        dockerfile: Dockerfile
        tags: |
          latest
          #tag2
    