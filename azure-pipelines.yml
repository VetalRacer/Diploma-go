variables:
- group: Infrastructure
- name: buildConfiguration 
  value: Release
- name: registryUser
  value: diplomaContainerRegistry
- name: regisrtyUrl
  value: diplomacontainerregistry.azurecr.io

stages:
- stage: 'infrastucture'
  displayName: 'Provision Infrastucture'
  #condition: contains(variables['build.sourceBranch'], 'refs/heads/terraform')
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/terraform'))
  jobs:
  - job: Prepare_Infrastructure
    displayName: 'Prepare Azure Infrastructure'
    pool:
      vmImage: 'ubuntu-18.04'
    steps:
    - task: Bash@3
      displayName: "set commitMessage variable"
      inputs:
        targetType: inline
        script: echo '##vso[task.setvariable variable=commitMessage]$(Build.SourceVersionMessage)'
    - script: |
        # Cd to terraform folder.
        cd deploy/terraform/storage

        # Exit when any command returns a failure status.
        set -e
        # Write terraform.tfvars.
        echo 'resource_group_location = "'$(ResourceGroupLocation)'"' | tee terraform.tfvars
        # Initialize Terraform.
        terraform init -input=false
        # Apply the Terraform plan.
        terraform apply -input=false -auto-approve

      condition: and(succeeded(), eq(variables.commitMessage, 'firstdeploy'))

  - job: Deploy_Infrastucture
    dependsOn: Prepare_Infrastructure
    displayName: 'Deploy Azure Infrastructure'
    pool:
      vmImage: 'ubuntu-18.04'
    steps:
    - script: |
        # Cd to terraform folder.
        cd deploy/terraform/infrastructure
   
        # Exit when any command returns a failure status.
        set -e
        # Write terraform.tfvars.
        echo 'resource_group_location = "'$(ResourceGroupLocation)'"' | tee terraform.tfvars
        # Write backend.tfvars.
        echo 'resource_group_name = "tf-storage-rg"' | tee backend.tfvars
        echo 'storage_account_name = "'$(StorageAccountName)'"' | tee -a backend.tfvars
        echo 'container_name = "tfstate"' | tee -a backend.tfvars
        echo 'key = "terraform.tfstate"' | tee -a backend.tfvars
        # Initialize Terraform.
        terraform init -input=false -backend-config="backend.tfvars"
        # Apply the Terraform plan.
        terraform apply -input=false -auto-approve

        # Destroy the Terraform plan.
        #terraform destroy -input=false -auto-approve

      name: 'RunTerraform'
      displayName: 'Run Terraform'
      env:
        TF_VAR_arm_client_id: $(ARM_CLIENT_ID)
        TF_VAR_arm_client_secret: $(ARM_CLIENT_SECRET)
        TF_VAR_db_pass: $(DB_PASS)
        TF_VAR_registry_user: $(registryUser)
        TF_VAR_registry_url: $(registryUrl)

- stage: 'SonarQube'
  displayName: 'SonarQube'
  condition: contains(variables['build.sourceBranch'], 'refs/heads/develop')
  jobs:
  - job: Test_Code
    displayName: 'Test Code'
    pool:
      vmImage: 'ubuntu-18.04'
    steps:
    - script: |
        #Prepare sonar-scanner
        mkdir /downloads/sonarqube -p
        cd /downloads/sonarqube
        wget https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.2.0.1873-linux.zip
        unzip sonar-scanner-cli-4.2.0.1873-linux.zip
        mv sonar-scanner-4.2.0.1873-linux /opt/sonar-scanner
        cat /opt/sonar-scanner/conf/sonar-scanner.properties
        export PATH="$PATH:/opt/sonar-scanner/bin"
        echo "START CODE SCAN"
      
        #Test code
        sonar-scanner \
          -Dsonar.projectKey=Diploma-go \
          -Dsonar.sources=. \
          -Dsonar.host.url=http://20.50.49.188:9000 \
          -Dsonar.login=0cac1b53bd68e2d758d0ddb429e84b539d70c210 \
          -Dsonar.qualitygate.wait=true

      name: 'Quality_Gates'
      displayName: 'Quality Gates'

- stage: 'Build'
  displayName: 'Build application'
  condition: contains(variables['build.sourceBranch'], 'refs/heads/terraform')
  #condition: and(succeeded(), or(eq(variables['Build.SourceBranch'], 'refs/heads/terraform'), eq(variables['Build.SourceBranch'], 'refs/heads/develop')))
  jobs:
  - job: Build_Image
    displayName: 'Build job image'
    pool:
      vmImage: 'ubuntu-18.04'
    steps:
    - script: |
        # Cd to terraform folder.
        cd deploy/terraform/build
   
        # Exit when any command returns a failure status.
        set -e
        # Write terraform.tfvars.
        echo 'resource_group_location = "'$(ResourceGroupLocation)'"' | tee terraform-docker.tfvars
        # Write backend.tfvars.
        echo 'resource_group_name = "tf-storage-rg"' | tee backend-docker.tfvars
        echo 'storage_account_name = "'$(StorageAccountName)'"' | tee -a backend-docker.tfvars
        echo 'container_name = "tfstate"' | tee -a backend-docker.tfvars
        echo 'key = "terraform.tfstate-docker"' | tee -a backend-docker.tfvars
        # Initialize Terraform.
        terraform init -input=false -backend-config="backend-docker.tfvars"
        # Apply the Terraform plan.
        terraform apply -input=false -auto-approve
        export registrypass=$(terraform output -raw registrypass)
      
        #buildandpush
        cd - 
        docker login diplomacontainerregistry.azurecr.io -u diplomaContainerRegistry -p $registrypass
        docker build -t diplomacontainerregistry.azurecr.io/nhl:$BUILD_BUILDNUMBER -f Dockerfile .
        docker push diplomacontainerregistry.azurecr.io/nhl:$BUILD_BUILDNUMBER
        echo $BUILD_BUILDNUMBER

      name: 'RunTerraform'
      displayName: 'Run Terraform'
      env:
        TF_VAR_arm_subscription_id: $(ARM_SUBSCRIPTION_ID)


- stage: 'Deploy_App'
  displayName: 'Deploy App'
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/terraform'))
  jobs:

  - job:  Deploy_to_Dev
    displayName: 'Deploy to Dev'
    pool:
      vmImage: 'ubuntu-18.04'
    steps:
    - script: |
        # Cd to terraform folder.
        
        cd deploy/terraform/deploy
        export TF_VAR_tag=$(echo $BUILD_BUILDNUMBER)
        printenv   
        # Exit when any command returns a failure status.
        set -e
        # Write terraform.tfvars.
        echo 'resource_group_location = "'$(ResourceGroupLocation)'"' | tee terraform-app-dev.tfvars
        # Write backend.tfvars.
        echo 'resource_group_name = "tf-storage-rg"' | tee backend-app-dev.tfvars
        echo 'storage_account_name = "'$(StorageAccountName)'"' | tee -a backend-app-dev.tfvars
        echo 'container_name = "tfstate"' | tee -a backend-app-dev.tfvars
        echo 'key = "terraform.tfstate-app-dev"' | tee -a backend-app-dev.tfvars
        # Initialize Terraform.
        terraform init -input=false -backend-config="backend-app-dev.tfvars"
        # Apply the Terraform plan.
        terraform apply -input=false -auto-approve

      name: 'RunTerraform'
      displayName: 'Run Terraform'
      env:
        TF_VAR_db_pass: $(DB_PASS)
        TF_VAR_registry_url: $(registryUrl)
        TF_VAR_values_name: values.dev
        TF_VAR_namespace: develop

  - job: waitForValidation
    displayName: "Wait > Wait for manual appoval"
    dependsOn: Deploy_to_Dev
    pool: "server"
    timeoutInMinutes: "5" # job times out in 3 days
    steps:
      - task: ManualValidation@0
        timeoutInMinutes: "3" # task times out in 1 day
        inputs:
          notifyUsers: |
                           vitalii_brazhaev@epam.com
          instructions: "There are resources being destroyed as part of this deployment, please review the output of Terraform plan before approving."
          onTimeout: "reject"

  - job:  Deploy_to_Prod
    displayName: 'Deploy to Prod'
    dependsOn: waitForValidation
    pool:
      vmImage: 'ubuntu-18.04'
    steps:
    - script: |
        # Cd to terraform folder.
        
        cd deploy/terraform/deploy
        export TF_VAR_tag=$(echo $BUILD_BUILDNUMBER)
        printenv   
        # Exit when any command returns a failure status.
        set -e
        # Write terraform.tfvars.
        echo 'resource_group_location = "'$(ResourceGroupLocation)'"' | tee terraform-app-prod.tfvars
        # Write backend.tfvars.
        echo 'resource_group_name = "tf-storage-rg"' | tee backend-app-prod.tfvars
        echo 'storage_account_name = "'$(StorageAccountName)'"' | tee -a backend-app-prod.tfvars
        echo 'container_name = "tfstate"' | tee -a backend-app-prod.tfvars
        echo 'key = "terraform.tfstate-app-prod"' | tee -a backend-app-prod.tfvars
        # Initialize Terraform.
        terraform init -input=false -backend-config="backend-app-prod.tfvars"
        # Apply the Terraform plan.
         terraform apply -input=false -auto-approve

      name: 'RunTerraform'
      displayName: 'Run Terraform'
      env:
        TF_VAR_db_pass: $(DB_PASS)
        TF_VAR_registry_url: $(registryUrl)
        TF_VAR_values_name: values.prod
        TF_VAR_namespace: production
