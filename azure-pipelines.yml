trigger:
  branches:
    include:
    - terraform

variables:
  buildConfiguration: 'Release'
#  ServiceConnnectionName: 'Tailspin.SpaceGame.Web.Full'

stages:
#- stage: 'Build'
#  displayName: 'Build web application'
#  jobs: 
#  - job: 'Build Image'
#    displayName: 'Build job image'

- stage: 'infrastucture'
  displayName: 'Provision Infrastucture'
  #dependsOn: Build
  jobs:
  - job: 'Prepare Infrastructure'
    displayName: 'Prepare Azure Infrastructure'
    pool:
      vmImage: 'ubuntu-18.04'
    variables:
    - group: Infrastructure
    steps:
    - script: |
        # Cd to terraform folder.
        cd terraform/storage

        # Exit when any command returns a failure status.
        set -e
        # Write terraform.tfvars.
        echo 'resource_group_location = "'$(ResourceGroupLocation)'"' | tee terraform.tfvars
        # Initialize Terraform.
        terraform init -input=false
        # Apply the Terraform plan.
        terraform apply -input=false -auto-approve

        # Destroy the Terraform plan.
        
        #terraform destroy -input=false -auto-approve

  - job: Deploy Infrastucture
    displayName: 'Deploy Azure Infrastructure'
    pool:
      vmImage: 'ubuntu-18.04'
    variables:
    - group: Infrastructure
    steps:
    - script: |
        # Cd to terraform folder.
        cd terraform
   
        # Exit when any command returns a failure status.
        set -e
        # Write terraform.tfvars.
        echo 'resource_group_location = "'$(ResourceGroupLocation)'"' | tee terraform.tfvars
        # Write backend.tfvars.
        echo 'resource_group_name = "tf-storage-rg"' | tee backend.tfvars
        echo 'storage_account_name = "'$(StorageAccountName)'"' | tee -a backend.tfvars
        echo 'container_name = "tfstate"' | tee -a backend.tfvars
        echo 'key = "terraform.tfstate"' | tee -a backend.tfvars
        # Initialize Terraform.
        terraform init -input=false -backend-config="backend.tfvars"
        # Apply the Terraform plan.
        terraform apply -input=false -auto-approve
        # Get the App Service name for the dev environment.
        #WebAppNameDev=$(terraform output --raw appservice_name)
        # Write the WebAppNameDev variable to the pipeline.
        #echo "##vso[task.setvariable variable=WebAppNameDev;isOutput=true]$WebAppNameDev"

        # Destroy the Terraform plan.
        terraform destroy -input=false -auto-approve

      name: 'RunTerraform'
      displayName: 'Run Terraform'
      env:
        TF_VAR_arm_client_id: $(ARM_CLIENT_ID)
        TF_VAR_arm_client_secret: $(ARM_CLIENT_SECRET)
        TF_VAR_arm_tenant_id: $(ARM_TENANT_ID)
        TF_VAR_arm_subscription_id: $(ARM_SUBSCRIPTION_ID)