stages:
- stage: 'Build'
  displayName: 'Build application'
  condition: startsWith(variables['build.sourceBranch'], 'refs/heads/terraform')
  #condition: and(succeeded(), or(eq(variables['Build.SourceBranch'], 'refs/heads/terraform'), eq(variables['Build.SourceBranch'], 'refs/heads/develop')))
  jobs:
  - job: Build_Image
    displayName: 'Build job image'
    pool:
      vmImage: 'ubuntu-18.04'
    steps:
    - script: |
        # Cd to terraform folder.
        cd deploy/terraform/build
   
        # Exit when any command returns a failure status.
        set -e
        # Write terraform.tfvars.
        echo 'resource_group_location = "'$(ResourceGroupLocation)'"' | tee terraform-docker.tfvars
        # Write backend.tfvars.
        echo 'resource_group_name = "tf-storage-rg"' | tee backend-docker.tfvars
        echo 'storage_account_name = "'$(StorageAccountName)'"' | tee -a backend-docker.tfvars
        echo 'container_name = "tfstate"' | tee -a backend-docker.tfvars
        echo 'key = "terraform.tfstate-docker"' | tee -a backend-docker.tfvars
        # Initialize Terraform.
        terraform init -input=false -backend-config="backend-docker.tfvars"
        # Apply the Terraform plan.
        terraform apply -input=false -auto-approve
        export registrypass=$(terraform output -raw registrypass)
      
        #buildandpush
        cd - 
        docker login diplomacontainerregistry.azurecr.io -u diplomaContainerRegistry -p $registrypass
        docker build -t diplomacontainerregistry.azurecr.io/nhl:$BUILD_BUILDNUMBER -f Dockerfile .
        docker push diplomacontainerregistry.azurecr.io/nhl:$BUILD_BUILDNUMBER
        echo $BUILD_BUILDNUMBER

      name: 'RunTerraform'
      displayName: 'Run Terraform'
      env:
        TF_VAR_arm_subscription_id: $(ARM_SUBSCRIPTION_ID)