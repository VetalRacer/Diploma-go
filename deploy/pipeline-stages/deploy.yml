stages:
- stage: 'Deploy_App'
  displayName: 'Deploy App'
  condition: succeeded()
  jobs:

  - job:  Deploy_to_Dev
    displayName: 'Deploy to Dev'
    pool:
      vmImage: 'ubuntu-18.04'
    steps:
    - script: |
        # Cd to terraform folder.
        
        printenv
        cd deploy/terraform/deploy
        export TF_VAR_tag=$(echo $BUILD_BUILDNUMBER)
        # Exit when any command returns a failure status.
        set -e
        # Write terraform.tfvars.
        echo 'resource_group_location = "'$(ResourceGroupLocation)'"' | tee terraform-app-dev.tfvars
        # Write backend.tfvars.
        echo 'resource_group_name = "tf-storage-rg"' | tee backend-app-dev.tfvars
        echo 'storage_account_name = "'$(StorageAccountName)'"' | tee -a backend-app-dev.tfvars
        echo 'container_name = "tfstate"' | tee -a backend-app-dev.tfvars
        echo 'key = "terraform.tfstate-app-dev"' | tee -a backend-app-dev.tfvars
        # Initialize Terraform.
        terraform init -input=false -backend-config="backend-app-dev.tfvars"
        # Apply the Terraform plan.
        terraform apply -input=false -auto-approve

      name: 'RunTerraform'
      displayName: 'Run Terraform'
      env:
        TF_VAR_db_pass: $(DB_PASS)
        TF_VAR_registry_url: $(registryUrl)
        TF_VAR_domain: $(domain)
        TF_VAR_values_name: values.dev
        TF_VAR_namespace: develop

  - job: waitForValidation
    condition: and(in(variables['build.sourceBranch'], 'refs/heads/release', 'refs/heads/infrastructure'), succeeded())
    displayName: "Wait > Wait for manual appoval"
    dependsOn: Deploy_to_Dev
    pool: "server"
    timeoutInMinutes: "5" # job times out in 3 days
    steps:
      - task: ManualValidation@0
        timeoutInMinutes: "3" # task times out in 1 day
        inputs:
          notifyUsers: |
                           vitalii_brazhaev@epam.com
          instructions: "There are resources being destroyed as part of this deployment, please review the output of Terraform plan before approving."
          onTimeout: "reject"

  - job:  Deploy_to_Prod
    condition: and(in(variables['build.sourceBranch'], 'refs/heads/release', 'refs/heads/infrastructure'), succeeded())
    displayName: 'Deploy to Prod'
    dependsOn: waitForValidation
    pool:
      vmImage: 'ubuntu-18.04'
    steps:
    - script: |
        # Cd to terraform folder.
        
        printenv
        cd deploy/terraform/deploy
        export TF_VAR_tag=$(echo $BUILD_BUILDNUMBER) 
        # Exit when any command returns a failure status.
        set -e
        # Write terraform.tfvars.
        echo 'resource_group_location = "'$(ResourceGroupLocation)'"' | tee terraform-app-prod.tfvars
        # Write backend.tfvars.
        echo 'resource_group_name = "tf-storage-rg"' | tee backend-app-prod.tfvars
        echo 'storage_account_name = "'$(StorageAccountName)'"' | tee -a backend-app-prod.tfvars
        echo 'container_name = "tfstate"' | tee -a backend-app-prod.tfvars
        echo 'key = "terraform.tfstate-app-prod"' | tee -a backend-app-prod.tfvars
        # Initialize Terraform.
        terraform init -input=false -backend-config="backend-app-prod.tfvars"
        # Apply the Terraform plan.
         terraform apply -input=false -auto-approve

      name: 'RunTerraform'
      displayName: 'Run Terraform'
      env:
        TF_VAR_db_pass: $(DB_PASS)
        TF_VAR_registry_url: $(registryUrl)
        TF_VAR_domain: $(domain)
        TF_VAR_values_name: values.prod
        TF_VAR_namespace: production
